<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sct.service.database.mapper.ScSsoLogMapper">
  <resultMap id="BaseResultMap" type="com.sct.service.database.entity.ScSsoLog">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jan 12 20:12:31 CST 2021.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="sso_log_type" jdbcType="DECIMAL" property="ssoLogType" />
    <result column="sso_service_id" jdbcType="VARCHAR" property="ssoServiceId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="operation_status" jdbcType="DECIMAL" property="operationStatus" />
    <result column="operation_user_id" jdbcType="VARCHAR" property="operationUserId" />
    <result column="request_ip" jdbcType="VARCHAR" property="requestIp" />
    <result column="request_user_agent" jdbcType="VARCHAR" property="requestUserAgent" />
    <result column="request_proxy" jdbcType="VARCHAR" property="requestProxy" />
    <result column="request_imei" jdbcType="VARCHAR" property="requestImei" />
  </resultMap>
  <sql id="allNonColumns">user_id, sso_log_type, sso_service_id, create_time, operation_status, operation_user_id, request_ip, request_user_agent, request_proxy, request_imei</sql>
  <sql id="allColumns">id,<include refid="allNonColumns"></include></sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sc_sso_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.sct.service.database.entity.ScSsoLog">
    insert into sc_sso_log (<include refid="allNonColumns"></include>)
    values (#{userId,jdbcType=VARCHAR}, #{ssoLogType,jdbcType=DECIMAL},
      #{ssoServiceId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{operationStatus,jdbcType=DECIMAL}, 
      #{operationUserId,jdbcType=VARCHAR}, #{requestIp,jdbcType=VARCHAR}, #{requestUserAgent,jdbcType=VARCHAR}, 
      #{requestProxy,jdbcType=VARCHAR}, #{requestImei,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.sct.service.database.entity.ScSsoLog">
    update sc_sso_log
    set user_id = #{userId,jdbcType=VARCHAR},
      sso_log_type = #{ssoLogType,jdbcType=DECIMAL},
      sso_service_id = #{ssoServiceId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      operation_status = #{operationStatus,jdbcType=DECIMAL},
      operation_user_id = #{operationUserId,jdbcType=VARCHAR},
      request_ip = #{requestIp,jdbcType=VARCHAR},
      request_user_agent = #{requestUserAgent,jdbcType=VARCHAR},
      request_proxy = #{requestProxy,jdbcType=VARCHAR},
      request_imei = #{requestImei,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select <include refid="allColumns"></include>
    from sc_sso_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select <include refid="allColumns"></include>
    from sc_sso_log
  </select>
  <sql id="queryCondition">
    <if test="condition.userId !=null and condition.userId != ''">
      and user_id = #{condition.userId}
    </if>
    <if test="condition.ssoLogType !=null">
      and sso_log_type = #{condition.ssoLogType}
    </if>
    <if test="condition.operationStatus">
      and operation_status = #{condition.operationStatus}
    </if>
    <if test="condition.requestIp !=null and condition.requestIp != ''">
      and request_ip = #{condition.requestIp}
    </if>
    <if test="condition.createTimeStart !=null">
      and create_time >= #{condition.createTimeStart,jdbcType=TIMESTAMP}
    </if>
    <if test="condition.validStatus !=null">
      and create_time &lt; #{condition.createTimeEnd,jdbcType=TIMESTAMP}
    </if>
  </sql>
  <select id="selectConditionCount" resultType="int">
    select count(*) from sc_sso_log
    <where>
      <include refid="queryCondition"></include>
    </where>
  </select>
  <select id="selectConditionPage" resultMap="BaseResultMap">
    select
    <include refid="allColumns"/>
    from sc_sso_log
    <where>
      <include refid="queryCondition"/>
    </where>
    limit ${qPaging.startIndex},${qPaging.endIndex}
  </select>
  <select id="selectCondition" resultMap="BaseResultMap">
    select
    <include refid="allColumns"/>
    from sc_sso_log
    <where>
      <include refid="queryCondition"/>
    </where>
  </select>
</mapper>